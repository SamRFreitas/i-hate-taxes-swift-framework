// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-macos11.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name IHateTaxes
import Foundation
@_exported import IHateTaxes
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 12.0, *)
@_Concurrency.MainActor @preconcurrency public struct AmountInput : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 12.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10IHateTaxes11AmountInputV4bodyQrvp", 0) __
}
public class ExpenseSettings : Swift.Codable {
  public var contabilizeiMonthlyFee: Swift.Double
  public init(minimumWage: Swift.Double, proLaborePercentage: Swift.Double, contabilizeiMonthlyFee: Swift.Double, rental: Swift.Double, digitalSignature: Swift.Double, numberOfMonthsToSaveMoney: Swift.Int, isNational: Swift.Bool)
  public func getAnnualExpense() -> Swift.Double
  public func getFundsEarmarkedForAnnualBills() -> Swift.Double
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Vrau {
  final public let expenseSettings: IHateTaxes.ExpenseSettings
  public var inss: IHateTaxes.Inss?
  public var das: IHateTaxes.Das?
  public init(amount: Swift.Double, expenseSettings: IHateTaxes.ExpenseSettings)
  public func configure()
  public func getAmountForInssCalculation() -> Swift.Double
  public func getDla() -> Swift.Double
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct Form : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10IHateTaxes4FormV4bodyQrvp", 0) __
}
public struct IrrfDeduction {
  public init(amountWithoutTax: Swift.Double)
}
@_hasMissingDesignatedInitializers public class Inss {
  final public let proLabore: Swift.Double
  public func getTax() -> Swift.Double
  public func getIrrfTax() -> Swift.Double
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct FormExpenseSettings : SwiftUICore.View {
  @SwiftUICore.State @_projectedValueProperty($minimumWage) @_Concurrency.MainActor @preconcurrency public var minimumWage: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $minimumWage: SwiftUICore.Binding<Swift.Double> {
    get
  }
  @SwiftUICore.State @_projectedValueProperty($proLaborePercentage) @_Concurrency.MainActor @preconcurrency public var proLaborePercentage: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $proLaborePercentage: SwiftUICore.Binding<Swift.Double> {
    get
  }
  @SwiftUICore.State @_projectedValueProperty($contabilizeiMonthlyFee) @_Concurrency.MainActor @preconcurrency public var contabilizeiMonthlyFee: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $contabilizeiMonthlyFee: SwiftUICore.Binding<Swift.Double> {
    get
  }
  @SwiftUICore.State @_projectedValueProperty($rental) @_Concurrency.MainActor @preconcurrency public var rental: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $rental: SwiftUICore.Binding<Swift.Double> {
    get
  }
  @SwiftUICore.State @_projectedValueProperty($digitalSignature) @_Concurrency.MainActor @preconcurrency public var digitalSignature: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $digitalSignature: SwiftUICore.Binding<Swift.Double> {
    get
  }
  @SwiftUICore.State @_projectedValueProperty($numberOfMonthsToSaveMoney) @_Concurrency.MainActor @preconcurrency public var numberOfMonthsToSaveMoney: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $numberOfMonthsToSaveMoney: SwiftUICore.Binding<Swift.Int> {
    get
  }
  @SwiftUICore.State @_projectedValueProperty($isNational) @_Concurrency.MainActor @preconcurrency public var isNational: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $isNational: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(minimumWage: Swift.Double = 0.0, proLaborePercentage: Swift.Double = 0.0, contabilizeiMonthlyFee: Swift.Double = 0.0, rental: Swift.Double = 0.0, digitalSignature: Swift.Double = 0.0, numberOfMonthsToSaveMoney: Swift.Int = 12, isNational: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10IHateTaxes19FormExpenseSettingsV4bodyQrvp", 0) __
}
public class Das {
  public init(amount: Swift.Double, isNational: Swift.Bool = false)
  public func getTax() -> Swift.Double
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct Switch : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10IHateTaxes6SwitchV4bodyQrvp", 0) __
}
public protocol Persistable {
  associatedtype StoreEngine
  var storeEngine: Self.StoreEngine { get }
  func save<T>(_ data: T, forKey key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
  func load<T>(forKey key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  func update<T>(_ data: T, forKey key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
}
public struct AmountHandler {
  public func calculate(percentage: Swift.Double, of value: Swift.Double) -> Swift.Double
  public func roundDouble(amount: Swift.Double) -> Swift.Double
  public func format(amount: Swift.Double, withDecimalPlaces decimalPlaces: Swift.Int = 2) -> Swift.String
}
public struct UserDefaultsStorage : IHateTaxes.Persistable {
  public typealias StoreEngine = Foundation.UserDefaults
  public var storeEngine: Foundation.UserDefaults
  public init(storeEngine: Foundation.UserDefaults = .standard)
  public func save<T>(_ data: T, forKey key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
  public func load<T>(forKey key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func update<T>(_ data: T, forKey key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
}
public class ExpenseSettingsManager {
  public init(storage: IHateTaxes.UserDefaultsStorage = UserDefaultsStorage())
  public func saveSettings(_ settings: IHateTaxes.ExpenseSettings)
  public func loadSettings() -> IHateTaxes.ExpenseSettings?
  public func updateSettings(_ settings: IHateTaxes.ExpenseSettings)
  public func deleteSettings()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct NumberOfMonthsPicker : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10IHateTaxes20NumberOfMonthsPickerV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct SimpleButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10IHateTaxes12SimpleButtonV4bodyQrvp", 0) __
}
@available(macOS 12.0, *)
extension IHateTaxes.AmountInput : Swift.Sendable {}
extension IHateTaxes.Form : Swift.Sendable {}
extension IHateTaxes.FormExpenseSettings : Swift.Sendable {}
extension IHateTaxes.Switch : Swift.Sendable {}
extension IHateTaxes.NumberOfMonthsPicker : Swift.Sendable {}
extension IHateTaxes.SimpleButton : Swift.Sendable {}
